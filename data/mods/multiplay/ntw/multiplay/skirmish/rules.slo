//3
// Skirmish Base Script.
//
// contains the rules for starting and ending a game.
// as well as warning messages.
// alex lee. pumpkin studios 99.
//

public	STRUCTURESTAT	command;			
public	STRUCTURESTAT	factory;			
public	STRUCTURESTAT	wall;			
public	STRUCTURESTAT	cornerWall;		
public	STRUCTURESTAT	oilDerrick;		
public	STRUCTURESTAT	powerGen;		
public	STRUCTURESTAT	research;
public	STRUCTURESTAT	commandrelay;
public 	STRUCTURESTAT	cybfac;
public 	STRUCTURESTAT	vtolfac;
public	STRUCTURESTAT	NuclearReactor1;
public	STRUCTURESTAT	CoolingTower1;
public	STRUCTURESTAT	look;
public	STRUCTURESTAT	shield;

////////
// starting technologies.
public	int				numCleanTech,	numBaseTech,	numDefTech;
public	RESEARCHSTAT	defTech[50];

// research topics
public	int				numBaseRes;
public	RESEARCHSTAT	baseRes[10];		

//	Other Stuff
private	INT				count;
private INT				playnum;
private	BOOL			gamewon;
private	BOOL			boolResult;

// Base Under Attack  
private	STRUCTURE		hitStruc,structure;
private	DROID			droid;
private	BASEOBJ			attackerObj;
private	int				t;
public	SOUND			attackSnd1;	

public	INTMESSAGE		endMsg, winMsg;

/*--------------------------------------------------------------*/
/*			Customizing				*/
/*--------------------------------------------------------------*/
public	ECM			NullEcm;

private	BOOL			TeamAlliances;		//General AI/Human team alliance building on/off
private	BOOL			ChangeHumanColor;
private	BOOL			ChangeAIColor;
private	int			ColorAITeam;
private	int			ColorHumanTeam;
private	BOOL			HumansCanDisally;
private	BOOL			isObserver[8];


/*--------------------------------------------------------------*/
/*			Descriptions				*/
/*--------------------------------------------------------------*/
/*%? Help1	=	"This is the global switch. 
By enabling this the games will ally AIs and Humans with each other.\n\n 
If you disable this, some other options like Team Color etc will not have any effect." */

/*%? Help2	=	"Select this option to make this player an observer. 
This player cannot influence the game in any way. 
He has no structures or units and cannot win or lose.\n\n
NOTE: if you are not playing a multiplayer game and want to see the entire map, 
you can enter debug mode (SHIFT-?), and press CTRL-G to reveal the map and 
CTRL-O to place HQ on the map.\n\n In a multiplayer game all players must 
use identical configuration." */
// /////////////////////////////////////////////////////////////////

trigger	endConditions	(every, 100);
trigger AllyWatchTr	(every, 20);

event	AllyWatch;

// /////////////////////////////////////////////////////////////////
//this event is called once the game has initialised itself


event initialisedEvent(CALL_GAMEINIT)
{
	TeamAlliances = FALSE;		/*%!	ID="TeamAlliances",
						MainDesc="Enable AI/Human teams",
						MoreInfo="<Help1>",
						type="asn",		//Assign
						val="FALSE",
						ArgDesc="No",
						val="TRUE",
						ArgDesc="Yes"	*/
	
	ChangeAIColor = FALSE;		/*%!	ID="ChangeAIColor",
						MainDesc="Set AI team colors",
						type="asn",		//Assign
						val="FALSE",
						ArgDesc="No",
						val="TRUE",
						ArgDesc="Yes"	*/

	ChangeHumanColor = FALSE;	/*%!	ID="ChangeHumanColor",
						MainDesc="Set Human team colors",
						type="asn",		//Assign
						val="FALSE",
						ArgDesc="No",
						val="TRUE",
						ArgDesc="Yes"	*/

	HumansCanDisally = TRUE;	/*%!	ID="HumansCanDisally",
						MainDesc="Humans allowed to break alliances",
						type="asn",		//Assign
						val="FALSE",
						ArgDesc="No",
						val="TRUE",
						ArgDesc="Yes"	*/

	ColorHumanTeam = 1;		/*%!	ID="ColorHumanTeam",
						MainDesc="Human Team Color",
						type="asn",		//Assign
						val="5",
						ArgDesc="Blue",
						val="0",
						ArgDesc="Green",
						val="1",
						ArgDesc="Orange",
						val="2",
						ArgDesc="Grey",
						val="3",
						ArgDesc="Black",
						val="4",
						ArgDesc="Red",
						val="6",
						ArgDesc="Pink",
						val="7",
						ArgDesc="Cyan",
						val="random(8)",
						ArgDesc="Random"	*/

	ColorAITeam = 2;		/*%!	ID="ColorAITeam",
						MainDesc="AI Team Color",
						type="asn",		//Assign
						val="4",
						ArgDesc="Red",
						val="0",
						ArgDesc="Green",
						val="1",
						ArgDesc="Orange",
						val="2",
						ArgDesc="Grey",
						val="3",
						ArgDesc="Black",
						val="5",
						ArgDesc="Blue",
						val="6",
						ArgDesc="Pink",
						val="7",
						ArgDesc="Cyan",
						val="random(8)",
						ArgDesc="Random"	*/

	isObserver[0] = FALSE;		/*%!	ID="Observer0",
						MainDesc="Player0 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[1] = FALSE;		/*%!	ID="Observer1",
						MainDesc="Player1 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[2] = FALSE;		/*%!	ID="Observer2",
						MainDesc="Player2 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[3] = FALSE;		/*%!	ID="Observer3",
						MainDesc="Player3 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[4] = FALSE;		/*%!	ID="Observer4",
						MainDesc="Player4 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[5] = FALSE;		/*%!	ID="Observer5",
						MainDesc="Player5 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[6] = FALSE;		/*%!	ID="Observer6",
						MainDesc="Player6 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	isObserver[7] = FALSE;		/*%!	ID="Observer7",
						MainDesc="Player7 is an observer",
						MoreInfo="<Help2>",
						type="asn",		//Assign
						tmpl="YesNo"	*/

	//set up the reticule buttons
	addReticuleButton(OPTIONS);
	addReticuleButton(CANCEL);
	addReticuleButton(BUILD);
	addReticuleButton(MANUFACTURE);
	addReticuleButton(RESEARCH);
	addReticuleButton(INTELMAP);
	addReticuleButton(DESIGN);

	playnum = 0;
	while (playnum < 8)
	{
		enableStructure(command		,playnum);		//make structures available to build
		enableStructure(factory		,playnum);
//		enableStructure(wall		,playnum);
//		enableStructure(cornerWall	,playnum);
		enableStructure(oilDerrick	,playnum);
		enableStructure(powerGen	,playnum);
		enableStructure(research	,playnum);
		
		setStructureLimits(factory,	5, playnum);	// set structure limits
		setStructureLimits(powerGen,5, playnum);
		setStructureLimits(research,5, playnum);
		setStructureLimits(command,	1, playnum);
		setStructureLimits(commandrelay,1, playnum);
		setStructureLimits(cybfac,	5, playnum);
		setStructureLimits(vtolfac,	5, playnum);
		setStructureLimits(NuclearReactor1, 	1, playnum);
		setStructureLimits(CoolingTower1, 	4,playnum);
		setStructureLimits(look, 	1, playnum);
		setStructureLimits(shield, 	1, playnum);

//-----------------------------------------
//MOD code comes here
//-----------------------------------------
		if(TeamAlliances)
		{
			setEventTrigger(AllyWatch, AllyWatchTr);	//Every 20

			count = 0;
			while(count < 8)
			{
				//Set human color if required
				if(isHumanPlayer(count))
				{
					if(ChangeHumanColor)
					{
						setPlayerColour(ColorHumanTeam, count);
					}
				}

				if(count != playnum)
				{
					if((isHumanPlayer(playnum))  and (isHumanPlayer(count)))
					{
						createAlliance(playnum, count);
						//if(ChangeHumanColor)
						//{
						//	setPlayerColour(ColorHumanTeam, playnum);
						//}
					}

					if((not isHumanPlayer(playnum))  and (not isHumanPlayer(count)))
					{
						createAlliance(playnum, count);
						if(ChangeAIColor)
						{
							setPlayerColour(ColorAITeam, playnum);
						}
					}
				}
				count = count + 1;
			}
		}





	//---------------------------------
	//Observer code
	//---------------------------------
	if(isObserver[playnum])
	{
		//Structures
		boolResult = TRUE;
		while(boolResult)
		{
			initEnumStruct(TRUE,factory,playnum,playnum);			
			structure = enumStruct();
			while(structure != NULLOBJECT)
			{
				destroyStructure(structure);
				structure = enumStruct();
			}

			initEnumStruct(TRUE,factory,playnum,playnum);			
			structure = enumStruct();
			boolResult = FALSE;
			if(structure != NULLOBJECT)
			{
				boolResult = TRUE;		//Still structures left
			}
		}

		//Droids
		droid = getDroid(NullEcm, playnum);
		while(droid != NULLOBJECT)
		{
			vanishUnit(droid);
			droid = getDroid(NullEcm, playnum);
		}
	}



//-----------------------------------------
//End of MOD code
//-----------------------------------------

		playnum = playnum+ 1;	
	}

	applyLimitSet();	// set limit options
}

//AI's only
event AllyWatch(inactive)		//(every, 20)
{
	playnum = 0;
	while (playnum < multiPlayerMaxPlayers)
	{
		count = 0;
		while(count < multiPlayerMaxPlayers)
		{
			if(count != playnum)
			{
				//Ally AIs
				if(not allianceExistsBetween(playnum, count))
				{

					//AIs
					if((not isHumanPlayer(playnum))  and (not isHumanPlayer(count)))	//If both AIs
					{
						createAlliance(playnum, count);

						if(ChangeAIColor)
						{
							setPlayerColour(ColorAITeam, playnum);
						}
					}//Humans
					else if((isHumanPlayer(playnum))  and (isHumanPlayer(count)))
					{
						//Re-ally humans if they are not allowed to break alliances
						if(not (HumansCanDisally))
						{
							createAlliance(playnum, count);
							if(ChangeHumanColor)
							{
								setPlayerColour(ColorHumanTeam, playnum);
							}
						}
					}
				}
				else	//Check if allowed to stay allied
				{
					if((isHumanPlayer(playnum))  and (not isHumanPlayer(count)))	//If Human and AI allied
					{
						breakAlliance(playnum, count);
					}
					else if((not isHumanPlayer(playnum))  and (isHumanPlayer(count)))	//If Human and AI allied
					{
						breakAlliance(playnum, count);
					}
				}
			}
			count = count + 1;
		}

		playnum = playnum+ 1;	
	}
}

event initialisedEventTwo(CALL_GAMEINIT)
{
	
	playnum=0;
	while (playnum < 8)
	{
		count = 0;								
		while (count < numBaseRes)
		{
			enableResearch(baseRes[count], playnum);
			count = count +1;
		}

		if(multiPlayerBaseType == CAMP_CLEAN)
		{
			setPowerLevel(1300,playnum);	
			count = 0;								
			while (count < numCleanTech)
			{

				completeResearch(defTech[count], playnum);
				count = count +1;
			}
		}
		else if(multiPlayerBaseType == CAMP_BASE)
		{
			setPowerLevel(2500,playnum);	
			count = 0;								
			while (count < numBaseTech)
			{
				completeResearch(defTech[count], playnum);
				count = count +1;
			}
		
		}
		else
		{	

			setPowerLevel(2500,playnum);		
			count = 0;								
			while (count < numDefTech)
			{
				completeResearch(defTech[count], playnum);
				count = count +1;
			}
		}
	
		playnum = playnum+ 1;		
	}
}



// /////////////////////////////////////////////////////////////////
// END CONDITIONS
event checkEndConditions (endConditions)
{
	if(not (isObserver[selectedPlayer]))
	{
		// Losing Conditions
		if(( not anyDroidsLeft(selectedPlayer)) and  ( not anyFactoriesLeft(selectedPlayer))	)
		{
			gameOverMessage(endMsg, MISS_MSG, 0, FALSE);
			setEventTrigger(checkEndConditions, inactive);
		}
	
		// Winning Conditions. selected Player is the only remaining player
		count =0;
		gamewon = TRUE;

		while (count < multiPlayerMaxPlayers)
		{
			if ( (count != selectedPlayer) and not(isHumanPlayer(count))  )
			{
				if( anyDroidsLeft(count) or anyFactoriesLeft(count) ) 
				{
					gamewon = FALSE;
				}
			}
			count = count + 1;			
		}

		if(gamewon == TRUE)
		{
			gamewon = FALSE;
			if(dominatingAlliance())
			{
				gamewon = TRUE;
			}
		}

		if(gamewon == TRUE)
		{	
			gameOverMessage(winMsg, MISS_MSG, 0, TRUE);
			setEventTrigger(checkEndConditions, inactive);
		}	
	}
}

// /////////////////////////////////////////////////////////////////
// WARNING MESSAGES 
// Base Under Attack 
event baseHit(CALL_STRUCT_ATTACKED, selectedPlayer, ref hitStruc, ref attackerObj)
{
	if (t >= 10)
	{
		t=0;
		if (hitStruc != NULLOBJECT)
		{
			playSoundPos(attackSnd1, selectedPlayer, hitStruc.x, hitStruc.y, hitStruc.z);	//show position if still alive
		}
		else
		{
			playSound(attackSnd1, selectedPlayer);
		}
	}
}

event everySec(every, 10)
{
	t=t+1;
}

//go to where the structure being attacked is on CTRL B
event seeBaseHit(CALL_MISSION_END)
{
	if (hitStruc!=NULLOBJECT)
	{
		centreView(hitStruc);
		t=0;							//flag known about!
	}
}

