
private INT count,count2,count3,player;
private INT buildX,buildY;
private INT towerCount,towerPool,towerRegCount,power,maxPower,minusPower,actPower;
private	INT reactorPower,coolingPower,strengthRatio,reactorGAU,reactorCheck;
private	STRUCTURESTAT powGen,reactor,coolingTow;
private WEAPON nuke,nukeEmp,reactorBurn;
private STRUCTURE structure;
private STRUCTURE towers[13];
private BOOL towerReg[13],towerReg2[13];

event powerFromSources(every, 15)
{
    player = 0;
    while(player < 8)
    {   
        // Kohle für jeden upgegradeten PowerGen // get money from each upgraded powergen
        
        count = 0; 
        initEnumStruct(FALSE,powGen,player,player); 
        structure = enumStruct(); 
        while(structure != NULLOBJECT) 
        { 
            if( (structureComplete(structure)) and (testStructureModule(player, structure, 0)) ) 
            { 
                count = count + 1; 
                if(isHumanPlayer(player) )
                {
                    addPower(1 * 2, player);
                }
            } 
            structure = enumStruct(); 
        }
        
        // erweitertes Reaktor-scripting inkl. CoolingTowers !! // advanced reactor scriptings
        // wieviele Towers ? // how many towers ?
        
        towerCount=0;
        initEnumStruct(FALSE,coolingTow,player,player);
        towers[towerCount] = enumStruct();
        
        while(towers[towerCount] != NULLOBJECT)
        {
            towerReg[towerCount] = FALSE;  // für alle Reaktoren; welche sind "irgendwo" connected ?
                                           // for all reactors; which towers are connected "somewhere" ?
            towerReg2[towerCount] = FALSE; // das ist für den gewählten Reaktor // for the selected reactor
            towerCount = towerCount + 1;
            towers[towerCount] = enumStruct();
        }
        
        // Kohle für jeden Reaktor (aber auf Cooling achten *hehe*)
        // money for each reactor (but check the cooling!)
        
        count2 = 0; 
        power = 0;
        initEnumStruct(FALSE,reactor,player,player); 
        structure = enumStruct();
        
        while(structure != NULLOBJECT) 
        { 
            if(structureComplete(structure)) 
            { 
                towerPool = 0;
                towerRegCount = 0; // wieviel Tower sind am gewählten Reactor ? 
                                   // how many towers are on the selected reactor ?
                
                count3 = 0;
                while(count3 < towerCount)
                {
                    towerReg2[count3] = FALSE;
                    count3 = count3 + 1;
                }
                
                count3 = 0;
                while(count3 < towerCount)
                {
                    if((structureComplete(towers[count3])) and 
                        (not towerReg[count3]) and // damit registrierte nicht mehrmals zählen
                                                   // so registert wouldn't count twice!!
                        (towerRegCount < 2) and    // max 2 pro Reaktor!! // max 2 per reactor
                        (distBetweenTwoPoints(structure.x, structure.y, towers[count3].x, towers[count3].y)<320) )
                    {
                        towerRegCount = towerRegCount + 1;
                        towerReg[count3] = TRUE;
                        towerReg2[count3] = TRUE;
                        towerPool = towerPool + towers[count3].health;
                    }
                    count3 = count3 + 1;
                }
                
                if(towerRegCount < 1) // kein Tower -> Geldabzug! // no tower -> money drawback!
                {
                    power = power - 5;
                }
                else if(towerRegCount < 2) // nur ein Tower -> kein zusätzliches Geld 
                                           // only one tower -> no additional money
                {
                    power = power;
                }
                else // erst ab zwei Tower läuft der Reaktor an!! // more than two towers -> money!!
                {
                    power = power + 5;
                }
                
                // bei weniger als zwei Tower gibt's Schaden!!!
                // reactors get punished when there are less than two towers connected!!!
                
                reactorCheck = (100*strengthRatio + 200) - (structure.health*strengthRatio + towerPool);
                if(reactorCheck < 0) { reactorCheck = 0; }
                towerPool = 100 - (reactorCheck / 100);
                
                reactorCheck = (structure.health*towerPool)/100;
                
                if (reactorCheck < reactorGAU)
                {
                    fireWeaponAtLoc(nuke, structure.x, structure.y);
                    fireWeaponAtLoc(nukeEmp, structure.x, structure.y);
                    destroyStructure(structure);
                    
                    count3 = 0;
                    while(count3 < towerCount)
                    {
                        if(towerReg2[count3])
                        {
                            destroyStructure(towers[count3]);
                        }
                        count3 = count3 + 1;
                    }
                }
                else
                {
                    forceDamageObject(structure, reactorCheck);
                    if(reactorCheck < 75)
                    {
                        fireWeaponAtLoc(reactorBurn, structure.x, structure.y); // lets burn the reactor
                    }
                    count3 = 0;
                    while(count3 < towerCount)
                    {
                        if(towerReg2[count3])
                        {
                            forceDamageObject(towers[count3], (towers[count3].health*towerPool)/100);
                        }
                        count3 = count3 + 1;
                    }
                }
                
                count2 = count2 + 1; 
                addPower(power+2, player); 
            } 
            structure = enumStruct(); 
        }
        player = player + 1;
    }
}
