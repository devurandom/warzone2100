Warzone Compilation Guide.

The compilation method depends on your operating system.

This guide will tell you how to compile warzone on its two main supported platforms: Linux and Windows.

Linux Compilation:

	The INSTALL file in this directory may also help you.

	With the GNU autotools, compilation is straight forward. 'cd' a shell to warzones source root directory; the one containing the 'autogen.sh' file, and run the following commands: 
		./autogen.sh
		./configure
		make
		make install
	Note that the forth command must be run as a privileged user in order to succeed. 

	If the above commands fail, you're probably not having all the required software needed to satisfy the dependencies that warzone has on other libraries or tools. In that case, the scripts will tell you what package you're missing. 
 	Warzone has compile-time dependencies on the following software: autotools, gcc, make, SDL-dev, SDL_net-dev, oggvorbis-dev, mad-dev, zlib-dev, physicsfs-dev, OpenAL-dev, libpng-dev, libjpeg-dev. 
 	Depending on your flavor of Linux, the package names may be different. 
 	If you are certain that you got all the packages required, but still can't compile, then try compiling with this command instead:
 		make -f Makefile.raw
 	If the compilation succeeds, then you have a problem with your autotools - please check that your 'autoheader', 'autoconf' and 'automake' symlinks are pointing to the correct versions of these programs.
 	If the compilation still fails, write to our mailing list at: warzone-dev@gna.org or contact us on IRC at irc://irc.freenode.net/warzone

Windows Compilation:

	You may find a more up to date version at http://wz.rootzilla.de/wiki/user:windows_compile_guide

	Prerequesites:
		- Warzone Developer's Package (http://download.gna.org/warzone/development/warzone-devpkg.7z)
		- Only when using the SVN version: TortoiseSVN (http://tortoisesvn.tigris.org/)

		When using MinGW:
			- MinGW (http://mingw.org/)
				Candidate version is known to work.
				You need to install Core, GCC, Binutils, Make, API and Runtime. Others are optional.
			- Flex (http://gnuwin32.sourceforge.net/packages/flex.htm) and Bison (http://gnuwin32.sourceforge.net/packages/bison.htm)

		When using MSVC:
			- Microsoft Visual C++, eg. the MSVC 2005 Express Edtion (http://msdn.microsoft.com/vstudio/express/visualc/)
			- Microsoft Platform SDK (http://msdn.microsoft.com/platformsdk/)
			- Warzone Lexfiles (http://download.gna.org/warzone/development/warzone-lexfiles.7z)

	Downloading the sourcecode:
		Create a directory where you want to store the Warzone sourcecode. You will need the path to the sourcecode, so remember it’s location!

		Release version:
			Download a source tarball (tar.bz2) and extract it to the new folder.

		SVN version:
			Right-click on it and choose “SVN Checkout...”
			Set “URL of repository” to svn://svn.gna.org/warzone/trunk, leave everything else as is and click OK
 			TortoiseSVN will now checkout the up to date sourcecode from out SVN repository. This may take a while, especially on slow internet connections

	Preparing:
		Extract the Developer’s Package to a folder of your choice. Remember the location!
		Open the “src” folder in the newly checked out sourcecode directory
		Only when using the SVN version: Copy “version.c.tmpl” to “version.c” and change the version numbers according to the current version and the revision you checked out. If you want to distribute the compiled binary these versions need to be correct! (Otherwise you can leave them as is.)

		MinGW:
			Open the “makerules” folder in the newly checked out sourcecode directory
			Copy “config.mk.tmpl” to “config.mk” and change the settings and paths according to your needs

		MSVC:
			Extract the Lexfiles into the newly created sourcecode directory
			Open the Solution (MSVC 2005 and higher required, file: Warzone.sln) or the Project (file: Warzone.vcproj)
			Choose “Project / Properties” from the menu
			Change the “Additional Includedirectories” in “C/C++ / General” and “Additional Librarydirectories” in “Linker / General” according to your setup

	Compile:
		MinGW:
			Open a Windows Terminal
			cd to the sourcecode directory
			type “mingw32-make -f Makefile.raw”

		MSVC:
			Choose “Compile / Solution” from the menu
